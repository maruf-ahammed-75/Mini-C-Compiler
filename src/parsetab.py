
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA DECIMAL DIVIDE ELSE EQUALS EQUAL_TO FLOAT FOR GREATER GREATER_EQ IDENTIFIER IF INT INTEGER LBRACE LESS LESS_EQ LPAREN MINUS MOD MULTIPLY NOT_EQUAL PLUS PRINT RBRACE RETURN RPAREN SEMICOLON WHILEstart : stmt_sequencestmt_sequence : stmt_sequence stmt\n                         | stmtstmt : var_decl\n               | var_assign\n               | output_stmt\n               | conditional\n               | loop\n               | code_blockvar_decl : data_type IDENTIFIER SEMICOLON\n                   | data_type IDENTIFIER EQUALS expr SEMICOLONdata_type : INT\n                     | FLOATvar_assign : IDENTIFIER EQUALS expr SEMICOLONoutput_stmt : PRINT LPAREN expr RPAREN SEMICOLONconditional : IF LPAREN comparison RPAREN code_block\n                       | IF LPAREN comparison RPAREN code_block ELSE code_blockloop : WHILE LPAREN comparison RPAREN code_blockcode_block : block_start stmt_sequence block_endblock_start : LBRACEblock_end : RBRACEcomparison : expr rel_op exprrel_op : LESS\n                  | LESS_EQ\n                  | GREATER\n                  | GREATER_EQ\n                  | EQUAL_TO\n                  | NOT_EQUALexpr : expr PLUS term\n               | expr MINUS termexpr : termterm : term MULTIPLY base\n                | term DIVIDE base\n                | term MOD baseterm : basebase : INTEGER\n                | DECIMALbase : IDENTIFIERbase : LPAREN expr RPAREN'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,15,16,17,18,19,21,22,23,24,25,26,27,34,39,40,42,43,44,45,46,47,51,52,53,54,55,56,57,59,66,67,69,71,],[11,11,-3,-4,-5,-6,-7,-8,-9,20,11,-12,-13,-20,-2,28,28,28,28,11,-10,28,28,-19,-21,-14,28,28,28,28,28,28,-23,-24,-25,-26,-27,-28,-11,-15,-16,-18,-17,]),'PRINT':([0,2,3,4,5,6,7,8,9,15,18,19,25,26,39,40,42,59,66,67,69,71,],[12,12,-3,-4,-5,-6,-7,-8,-9,12,-20,-2,12,-10,-19,-21,-14,-11,-15,-16,-18,-17,]),'IF':([0,2,3,4,5,6,7,8,9,15,18,19,25,26,39,40,42,59,66,67,69,71,],[13,13,-3,-4,-5,-6,-7,-8,-9,13,-20,-2,13,-10,-19,-21,-14,-11,-15,-16,-18,-17,]),'WHILE':([0,2,3,4,5,6,7,8,9,15,18,19,25,26,39,40,42,59,66,67,69,71,],[14,14,-3,-4,-5,-6,-7,-8,-9,14,-20,-2,14,-10,-19,-21,-14,-11,-15,-16,-18,-17,]),'INT':([0,2,3,4,5,6,7,8,9,15,18,19,25,26,39,40,42,59,66,67,69,71,],[16,16,-3,-4,-5,-6,-7,-8,-9,16,-20,-2,16,-10,-19,-21,-14,-11,-15,-16,-18,-17,]),'FLOAT':([0,2,3,4,5,6,7,8,9,15,18,19,25,26,39,40,42,59,66,67,69,71,],[17,17,-3,-4,-5,-6,-7,-8,-9,17,-20,-2,17,-10,-19,-21,-14,-11,-15,-16,-18,-17,]),'LBRACE':([0,2,3,4,5,6,7,8,9,15,18,19,25,26,39,40,42,50,58,59,66,67,69,70,71,],[18,18,-3,-4,-5,-6,-7,-8,-9,18,-20,-2,18,-10,-19,-21,-14,18,18,-11,-15,-16,-18,18,-17,]),'$end':([1,2,3,4,5,6,7,8,9,19,26,39,40,42,59,66,67,69,71,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-2,-10,-19,-21,-14,-11,-15,-16,-18,-17,]),'RBRACE':([3,4,5,6,7,8,9,19,25,26,39,40,42,59,66,67,69,71,],[-3,-4,-5,-6,-7,-8,-9,-2,40,-10,-19,-21,-14,-11,-15,-16,-18,-17,]),'EQUALS':([11,20,],[21,27,]),'LPAREN':([12,13,14,21,22,23,24,27,34,43,44,45,46,47,51,52,53,54,55,56,57,],[22,23,24,34,34,34,34,34,34,34,34,34,34,34,34,-23,-24,-25,-26,-27,-28,]),'SEMICOLON':([20,28,29,30,31,32,33,41,49,60,61,62,63,64,65,],[26,-38,42,-31,-35,-36,-37,59,66,-29,-30,-32,-33,-34,-39,]),'INTEGER':([21,22,23,24,27,34,43,44,45,46,47,51,52,53,54,55,56,57,],[32,32,32,32,32,32,32,32,32,32,32,32,-23,-24,-25,-26,-27,-28,]),'DECIMAL':([21,22,23,24,27,34,43,44,45,46,47,51,52,53,54,55,56,57,],[33,33,33,33,33,33,33,33,33,33,33,33,-23,-24,-25,-26,-27,-28,]),'MULTIPLY':([28,30,31,32,33,60,61,62,63,64,65,],[-38,45,-35,-36,-37,45,45,-32,-33,-34,-39,]),'DIVIDE':([28,30,31,32,33,60,61,62,63,64,65,],[-38,46,-35,-36,-37,46,46,-32,-33,-34,-39,]),'MOD':([28,30,31,32,33,60,61,62,63,64,65,],[-38,47,-35,-36,-37,47,47,-32,-33,-34,-39,]),'PLUS':([28,29,30,31,32,33,35,37,41,48,60,61,62,63,64,65,68,],[-38,43,-31,-35,-36,-37,43,43,43,43,-29,-30,-32,-33,-34,-39,43,]),'MINUS':([28,29,30,31,32,33,35,37,41,48,60,61,62,63,64,65,68,],[-38,44,-31,-35,-36,-37,44,44,44,44,-29,-30,-32,-33,-34,-39,44,]),'RPAREN':([28,30,31,32,33,35,36,38,48,60,61,62,63,64,65,68,],[-38,-31,-35,-36,-37,49,50,58,65,-29,-30,-32,-33,-34,-39,-22,]),'LESS':([28,30,31,32,33,37,60,61,62,63,64,65,],[-38,-31,-35,-36,-37,52,-29,-30,-32,-33,-34,-39,]),'LESS_EQ':([28,30,31,32,33,37,60,61,62,63,64,65,],[-38,-31,-35,-36,-37,53,-29,-30,-32,-33,-34,-39,]),'GREATER':([28,30,31,32,33,37,60,61,62,63,64,65,],[-38,-31,-35,-36,-37,54,-29,-30,-32,-33,-34,-39,]),'GREATER_EQ':([28,30,31,32,33,37,60,61,62,63,64,65,],[-38,-31,-35,-36,-37,55,-29,-30,-32,-33,-34,-39,]),'EQUAL_TO':([28,30,31,32,33,37,60,61,62,63,64,65,],[-38,-31,-35,-36,-37,56,-29,-30,-32,-33,-34,-39,]),'NOT_EQUAL':([28,30,31,32,33,37,60,61,62,63,64,65,],[-38,-31,-35,-36,-37,57,-29,-30,-32,-33,-34,-39,]),'ELSE':([39,40,67,],[-19,-21,70,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'stmt_sequence':([0,15,],[2,25,]),'stmt':([0,2,15,25,],[3,19,3,19,]),'var_decl':([0,2,15,25,],[4,4,4,4,]),'var_assign':([0,2,15,25,],[5,5,5,5,]),'output_stmt':([0,2,15,25,],[6,6,6,6,]),'conditional':([0,2,15,25,],[7,7,7,7,]),'loop':([0,2,15,25,],[8,8,8,8,]),'code_block':([0,2,15,25,50,58,70,],[9,9,9,9,67,69,71,]),'data_type':([0,2,15,25,],[10,10,10,10,]),'block_start':([0,2,15,25,50,58,70,],[15,15,15,15,15,15,15,]),'expr':([21,22,23,24,27,34,51,],[29,35,37,37,41,48,68,]),'term':([21,22,23,24,27,34,43,44,51,],[30,30,30,30,30,30,60,61,30,]),'base':([21,22,23,24,27,34,43,44,45,46,47,51,],[31,31,31,31,31,31,31,31,62,63,64,31,]),'comparison':([23,24,],[36,38,]),'block_end':([25,],[39,]),'rel_op':([37,],[51,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> stmt_sequence','start',1,'p_start','parser.py',32),
  ('stmt_sequence -> stmt_sequence stmt','stmt_sequence',2,'p_stmt_sequence','parser.py',37),
  ('stmt_sequence -> stmt','stmt_sequence',1,'p_stmt_sequence','parser.py',38),
  ('stmt -> var_decl','stmt',1,'p_stmt','parser.py',42),
  ('stmt -> var_assign','stmt',1,'p_stmt','parser.py',43),
  ('stmt -> output_stmt','stmt',1,'p_stmt','parser.py',44),
  ('stmt -> conditional','stmt',1,'p_stmt','parser.py',45),
  ('stmt -> loop','stmt',1,'p_stmt','parser.py',46),
  ('stmt -> code_block','stmt',1,'p_stmt','parser.py',47),
  ('var_decl -> data_type IDENTIFIER SEMICOLON','var_decl',3,'p_var_decl','parser.py',51),
  ('var_decl -> data_type IDENTIFIER EQUALS expr SEMICOLON','var_decl',5,'p_var_decl','parser.py',52),
  ('data_type -> INT','data_type',1,'p_data_type','parser.py',69),
  ('data_type -> FLOAT','data_type',1,'p_data_type','parser.py',70),
  ('var_assign -> IDENTIFIER EQUALS expr SEMICOLON','var_assign',4,'p_var_assign','parser.py',74),
  ('output_stmt -> PRINT LPAREN expr RPAREN SEMICOLON','output_stmt',5,'p_output_stmt','parser.py',83),
  ('conditional -> IF LPAREN comparison RPAREN code_block','conditional',5,'p_conditional','parser.py',88),
  ('conditional -> IF LPAREN comparison RPAREN code_block ELSE code_block','conditional',7,'p_conditional','parser.py',89),
  ('loop -> WHILE LPAREN comparison RPAREN code_block','loop',5,'p_loop','parser.py',108),
  ('code_block -> block_start stmt_sequence block_end','code_block',3,'p_code_block','parser.py',119),
  ('block_start -> LBRACE','block_start',1,'p_block_start','parser.py',123),
  ('block_end -> RBRACE','block_end',1,'p_block_end','parser.py',129),
  ('comparison -> expr rel_op expr','comparison',3,'p_comparison','parser.py',134),
  ('rel_op -> LESS','rel_op',1,'p_rel_op','parser.py',140),
  ('rel_op -> LESS_EQ','rel_op',1,'p_rel_op','parser.py',141),
  ('rel_op -> GREATER','rel_op',1,'p_rel_op','parser.py',142),
  ('rel_op -> GREATER_EQ','rel_op',1,'p_rel_op','parser.py',143),
  ('rel_op -> EQUAL_TO','rel_op',1,'p_rel_op','parser.py',144),
  ('rel_op -> NOT_EQUAL','rel_op',1,'p_rel_op','parser.py',145),
  ('expr -> expr PLUS term','expr',3,'p_expr_add','parser.py',149),
  ('expr -> expr MINUS term','expr',3,'p_expr_add','parser.py',150),
  ('expr -> term','expr',1,'p_expr_term','parser.py',156),
  ('term -> term MULTIPLY base','term',3,'p_term_mul','parser.py',160),
  ('term -> term DIVIDE base','term',3,'p_term_mul','parser.py',161),
  ('term -> term MOD base','term',3,'p_term_mul','parser.py',162),
  ('term -> base','term',1,'p_term_base','parser.py',168),
  ('base -> INTEGER','base',1,'p_base_num','parser.py',172),
  ('base -> DECIMAL','base',1,'p_base_num','parser.py',173),
  ('base -> IDENTIFIER','base',1,'p_base_id','parser.py',177),
  ('base -> LPAREN expr RPAREN','base',3,'p_base_paren','parser.py',183),
]
